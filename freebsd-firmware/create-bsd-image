#!/bin/sh

. $1

. firmware-functions.sh

dir="${zpoolmnt}/${clonedir}"

rev=`getSvnRevision "$dir"`
echo "Going create ${type} image for $dir = $rev ..."

mdconfig -a -t malloc -s ${imgsize}M -u $md
gpart create -s ${type} md$md

if [ "$type" = "gpt" ] ; then
gpart add -t freebsd-boot -s 128k md$md
gpart add -t freebsd-ufs -l r$rev md$md
gpart set -a bootme -i 2 md$md
device="/dev/gpt/r$rev"
else
gpart add -t freebsd -i 1 md${md}
gpart create -s bsd md${md}s1
gpart add -t freebsd-ufs -i 1 md${md}s1
device="/dev/md${md}s1a"
fi

newfs ${device}
tunefs -J disable -j disable -n disable -o space -m 0 ${device}
mount ${device} $mnt
echo "begin install."
`cd $dir && make -DNO_GAMES=YES installworld distribution installkernel DESTDIR=$mnt`
echo "done install."

if [ "$type" = "gpt" ] ; then
echo "/dev/gpt/r${rev}	/	ufs	ro	1	1" >> $mnt/etc/fstab
else
echo "/dev/da0s1a	/	ufs	ro	1	1" >> $mnt/etc/fstab
fi
echo "fdesc	/dev/fd		fdescfs	rw	0	0" >>  $mnt/etc/fstab
echo "proc	/proc		procfs	rw	0	0" >>  $mnt/etc/fstab

echo "ifconfig_DEFAULT=\"DHCP\"" >>  $mnt/etc/rc.conf
echo "varmfs=\"NO\"" >>  $mnt/etc/rc.conf
echo "tmpmfs=\"NO\"" >>  $mnt/etc/rc.conf
echo "hostname=\"r${rev}\"" >>  $mnt/etc/rc.conf
echo "fsck_enable=\"NO\"" >>  $mnt/etc/rc.conf
echo "sshd_enable=\"YES\"" >>  $mnt/etc/rc.conf
echo "nameserver	8.8.8.8" >>  $mnt/etc/resolv.conf
echo "init_script=\"/etc/find-rwfs.sh\"" >>  $mnt/boot/loader.conf
echo "autoboot_delay=\"2"\" >>  $mnt/boot/loader.conf

echo "testroot" | pw -V $mnt/etc usermod root -h 0
echo "PermitRootLogin yes" >> $mnt/etc/ssh/sshd_config

#Copy our scripts
cp find-rwfs.sh $mnt/etc
cp prepare-localfs $mnt/root
chmod +x $mnt/etc

mv $mnt/var $mnt/var-blank
rm -fr $mnt/usr/src

#mount points MUST be on RO system :) You should create mountpoint (dirs) for your zfs too.
mkdir $mnt/etc-rw
mkdir $mnt/var-rw

if [ -n "${zfsdir}" ] ; then
#that's for zfs zpool
mkdir $mnt/${zfsdir}
fi

#pack sources, just in case
tar -Jcf $mnt/src-sys-r${rev}.tar.xz -C ${dir} sys

#symlinks
ln -s /usr/local/home $mnt/home
ln -s /usr/local/home $mnt/usr/home
ln -s /usr/local/ports $mnt/usr/ports
ln -s /usr/local/src $mnt/usr/src
ln -s /usr/local/varroot $mnt/var
ln -s /usr/local/bin/perl $mnt/usr/bin/perl

#we really need to boot.
if [ "$type" = "gpt" ] ; then
gpart bootcode -b $mnt/boot/pmbr -p $mnt/boot/gptboot -i 1 md$md
else
gpart bootcode -b ${mnt}/boot/boot0 md${md}
gpart bootcode -b ${mnt}/boot/boot md${md}s1
fi

sync
sleep 5
sync
umount $mnt
dd if=/dev/md$md bs=32M of=r${rev}-flat.vmdk
mdconfig -du $md

createVmdkFiles "r${rev}" "${imgsize}"
